{"version":3,"sources":["Announcement.js","ResetButton.js","Tile.js","App.js","serviceWorker.js","index.js"],"names":["Announcement","className","this","props","winner","React","Component","ResetButton","onClick","reset","Tile","gameLoop","loc","turn","tileClick","value","App","state","gameBoard","maxPlayer","minPlayer","resetBoard","bind","board","slice","setState","join","replace","length","player","move","newBoard","copyBoard","bestMoveScore","amIWinner","whetherTheMatchIsDraw","i","newBoardWithOCanBet","validMove","moveScore","maxScore","bestMoveValue","predictedMoveValue","minScore","currentGameBoard","findTileAICanMove","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c787f0d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Announcement.css'\r\nexport default class Announcement extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className={this.props.winner ? 'visible':'hidden'}>\r\n                <h2>Game Over</h2>\r\n                {<p>{this.props.winner} win!</p>}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './ResetButton.css';\r\nexport default class ResetButton extends React.Component{\r\n    render(){\r\n        return(\r\n            <button onClick={this.props.reset}>Reset</button>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './Tile.css';\r\nexport default class Tile extends React.Component{\r\n    tileClick(props){\r\n        props.gameLoop(props.loc, props.turn);\r\n    }\r\n    render(){\r\n        return(\r\n            <div className={`tile ${this.props.loc}`} onClick={()=>this.tileClick(this.props)}>\r\n                <p className='tile'>{this.props.value}</p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Announcement from './Announcement'; //Thong bao\nimport ResetButton from './ResetButton';\nimport Tile from './Tile'; //O\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      gameBoard: [\n        ' ',' ',' ',\n        ' ',' ',' ',\n        ' ',' ',' '\n      ],\n      turn:'X',\n      winner: null,\n      //use for Minimax Algorithm\n      maxPlayer: 'X',\n      minPlayer: 'O'\n    }\n    // this.updateBoard = this.updateBoard.bind(this);\n    this.resetBoard = this.resetBoard.bind(this);\n    this.gameLoop = this.gameLoop.bind(this);\n  }\n  copyBoard(board){\n    return board.slice(0);\n  }\n  resetBoard(){\n    this.setState({\n      gameBoard:[\n        ' ',' ',' ',\n        ' ',' ',' ',\n        ' ',' ',' '\n      ],\n      turn:'X',\n      winner: null,\n      //use for Minimax Algorithm\n      maxPlayer: 'X',\n      minPlayer: 'O'\n    })\n  }\n/*   updateBoard(loc, player){\n    player === 'X'? player='Human': player='AI';\n    if(this.state.gameBoard[loc] === 'O' || this.state.gameBoard[loc] === 'X' || this.state.winner)\n      return;\n    let currentGameBoard = this.state.gameBoard;\n    currentGameBoard.splice(loc, 1, this.state.turn); //Xoa bo phan tu o vi tri loc, thay the bang turn\n    this.setState({\n      gameBoard: currentGameBoard\n    });\n    //Cac duong di co the dan den chien thang\n    let topRow = this.state.gameBoard[0] + this.state.gameBoard[1] + this.state.gameBoard[2];\n    if(topRow.match(/XXX|OOO/)){\n      this.setState({winner: player});\n      return;\n    }\n    let MiddleRow = this.state.gameBoard[3] + this.state.gameBoard[4] + this.state.gameBoard[5];\n    if(MiddleRow.match(/XXX|OOO/)){\n      this.setState({winner: player});\n      return;\n    }\n    let bottomRow = this.state.gameBoard[6] + this.state.gameBoard[7] + this.state.gameBoard[8];\n    if(bottomRow.match(/XXX|OOO/)){\n      this.setState({winner: player});\n      return;\n    }\n    let leftCol = this.state.gameBoard[0] + this.state.gameBoard[3] + this.state.gameBoard[6];\n    if(leftCol.match(/XXX|OOO/)){\n      this.setState({winner: player});\n      return;\n    }\n    let middleCol = this.state.gameBoard[1] + this.state.gameBoard[4] + this.state.gameBoard[7];\n    if(middleCol.match(/XXX|OOO/)){\n      this.setState({winner: player});\n      return;\n    }\n    let rightCol = this.state.gameBoard[2] + this.state.gameBoard[5] + this.state.gameBoard[8];\n    if(rightCol.match(/XXX|OOO/)){\n      this.setState({winner: player});\n      return;\n    }\n    let leftDiag = this.state.gameBoard[0] + this.state.gameBoard[4] + this.state.gameBoard[8];\n    if(leftDiag.match(/XXX|OOO/)){\n      this.setState({winner: player});\n      return;\n    }\n    let rightDiag = this.state.gameBoard[2] + this.state.gameBoard[4] + this.state.gameBoard[6];\n    if(rightDiag.match(/XXX|OOO/)){\n      this.setState({winner: player});\n      return;\n    }\n    let tilesCantCheck = this.state.gameBoard.join('').replace(/ /g, '');\n    if(tilesCantCheck.length === 9){ //Khong con o nao co the danh duoc\n      this.setState({\n        winner: 'No one'\n      })\n    }\n    this.setState({\n      turn: this.state.turn === 'X'? 'O': 'X'\n    });\n  } */\n  whetherTheMatchIsDraw(board){\n    let moves = board.join('').replace(/ /g, '');\n    if(moves.length === 9)\n      return true;\n    return false;\n  }\n  amIWinner(board, player){\n    if(\n      (board[0] === player && board[1] === player && board[2] === player) ||\n      (board[3] === player && board[4] === player && board[5] === player) ||\n      (board[6] === player && board[7] === player && board[8] === player) ||\n      (board[0] === player && board[3] === player && board[6] === player) ||\n      (board[1] === player && board[4] === player && board[7] === player) ||\n      (board[2] === player && board[5] === player && board[8] === player) ||\n      (board[0] === player && board[4] === player && board[8] === player) ||\n      (board[2] === player && board[4] === player && board[6] === player)\n    )\n      return true;\n    else\n      return false;\n  }\n\n  validMove(move, player, board){\n    let newBoard = this.copyBoard(board);\n    if(newBoard[move] === ' '){\n      newBoard[move] = player;\n      return newBoard;\n    }\n    else\n      return null;\n  }\n\n  \n  findTileAICanMove(board){\n    let bestMoveScore = 100;\n    let move = null;\n    //Kiem tra tat ca duong di co the cua O khi game con co the tiep tuc choi duoc\n    if(this.amIWinner(board, 'X') || this.amIWinner(board, 'O') || this.whetherTheMatchIsDraw(board)){\n      return null;\n    }\n    for(let i = 0; i < board.length; i++){\n      let newBoardWithOCanBet = this.validMove(i, this.state.minPlayer, board);\n      if(newBoardWithOCanBet){\n        let moveScore = this.maxScore(newBoardWithOCanBet);\n        if(moveScore < bestMoveScore){\n          bestMoveScore = moveScore;\n          move = i;\n        }\n      }\n    }\n    return move;\n  }\n\n  minScore(board){\n    if(this.amIWinner(board, 'X'))\n      return 1;\n    else if(this.amIWinner(board, 'O'))\n      return -1;\n    else if(this.whetherTheMatchIsDraw(board))\n      return 0;\n    else{\n      let bestMoveValue = 100;\n      for(let i = 0; i < board.length; i++){\n        let newBoardWithOCanBet = this.validMove(i, this.state.minPlayer, board);\n        if(newBoardWithOCanBet){\n          let predictedMoveValue = this.maxScore(newBoardWithOCanBet);\n          if(predictedMoveValue < bestMoveValue){\n            bestMoveValue = predictedMoveValue;\n          }\n        }\n      }\n      return bestMoveValue;\n    }\n  }\n\n  maxScore(board){\n    if(this.amIWinner(board, 'X'))\n      return 1;\n    else if(this.amIWinner(board, 'O'))\n      return -1;\n    else if(this.whetherTheMatchIsDraw(board))\n      return 0;\n    else{\n      let bestMoveValue = -100;\n      for(let i = 0; i < board.length; i++){\n        let newBoardWithOCanBet = this.validMove(i, this.state.maxPlayer, board);\n        if(newBoardWithOCanBet){\n          let predictedMoveValue = this.minScore(newBoardWithOCanBet);\n          if(predictedMoveValue > bestMoveValue){\n            bestMoveValue = predictedMoveValue;\n          }\n        }\n      }\n      return bestMoveValue;\n    }\n  }\n\n  gameLoop(move){\n    if(this.state.gameBoard[move] === 'O' || this.state.gameBoard[move] === 'X' || this.state.winner)\n      return;\n    let player = this.state.turn;\n    let currentGameBoard = this.validMove(move, player, this.state.gameBoard);\n    if(this.amIWinner(currentGameBoard, player)){\n      this.setState({\n        gameBoard: currentGameBoard,\n         winner: player\n      });\n      return;\n    }\n    if(this.whetherTheMatchIsDraw(currentGameBoard)){\n      this.setState({\n        gameBoard: currentGameBoard,\n         winner: 'No one'\n      });\n      return;\n    }\n    player = 'O';\n    currentGameBoard = this.validMove(this.findTileAICanMove(currentGameBoard), player, currentGameBoard);\n    if(this.amIWinner(currentGameBoard, player)){\n      this.setState({\n        gameBoard: currentGameBoard,\n         winner: player\n      });\n      return;\n    }\n    if(this.whetherTheMatchIsDraw(currentGameBoard)){\n      this.setState({\n        gameBoard: currentGameBoard,\n         winner: 'No one'\n      });\n      return;\n    }\n    this.setState({\n      gameBoard: currentGameBoard\n    });\n  }\n\n  \n  render(){\n    return(\n      <div className=\"container\">\n        <div className=\"menu\">\n          <h1>Tic-Tac-Toe</h1>\n          <Announcement winner={this.state.winner}/>\n          <ResetButton reset={this.resetBoard} />\n        </div>\n        <div className=\"grid-container\">\n          {this.state.gameBoard.map((value, index)=>{\n            return(\n              <div className='grid-item'>\n                <Tile key={index} loc={index} value={value} gameLoop={this.gameLoop} turn={this.state.turn}/>\n              </div>\n            )\n          })}\n        </div>\n        \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}